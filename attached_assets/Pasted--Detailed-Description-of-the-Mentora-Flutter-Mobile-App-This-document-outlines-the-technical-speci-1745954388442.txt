✅ Detailed Description of the Mentora Flutter Mobile App

This document outlines the technical specification for a mobile-first Flutter application named Mentora, an E-learning platform tailored for classroom-based education in Pakistan. The app supports three roles: Admin, Teacher, and Student, with distinct functionalities and interfaces.

📱 Platform Overview
Mentora is a cross-platform mobile app developed using Flutter (latest stable). It is designed for Android and iOS, ensuring a seamless, responsive experience with role-based functionality.

📌 Core Features by Role (Mobile UI)

🧑‍💼 Admin (Mobile admin panel):

Create/update/delete courses (title, description, duration, fees, capacity).

Assign instructors to courses.

Set enrollment windows (start/end date, fee, max capacity).

View enrolled students per course.

👨‍🏫 Teacher (Mobile teacher dashboard):

Manage assigned courses and classrooms.

Create and review assignments/quizzes with attachments.

Mark student attendance.

Schedule and host live video sessions (Dyte/WebRTC/Agora).

Upload materials (PDF, video).

Monitor student progress and give feedback.

👨‍🎓 Student (Mobile learning experience):

Sign up/log in via email/password.

Browse available courses (with filters).

Enroll using Stripe payment.

Join waitlists for full courses.

View/download materials.

Submit assignments, attempt quizzes.

View attendance and teacher feedback.

Join/replay live sessions.

🔐 Functional Modules (Mobile)

Authentication: Role-based mobile login

Course Management: Mobile CRUD interface

Enrollment: Stripe payments + waitlist

Attendance: Mobile marking/viewing

Assignments & Quizzes: File upload, real-time/scheduled evaluation

Live Sessions: Embedded video experience on mobile

Notifications: Firebase push notifications

Materials: Downloadable content inside the app

🛠️ Mobile Tech Stack

Frontend: Flutter (mobile-first)

State Management: flutter_bloc

Network: Dio (with interceptors)

Models/State: Equatable

Notifications: Firebase Messaging (mobile push)

Payments: Stripe Flutter SDK

Video SDK: Dyte / Agora / WebRTC (mobile-ready)

Backend: Laravel (REST API)

Storage: AWS/Firebase Storage

Others: OpenAI API, plagiarism checker

📁 App Architecture

plaintext
Copy
Edit
lib/
├── core/              # Constants, themes, helpers
├── data/
│   ├── models/
│   ├── repositories/
│   └── datasources/
├── domain/
│   ├── entities/
│   ├── repositories/
│   └── usecases/
├── presentation/
│   ├── common/        # Shared widgets
│   ├── auth/
│   ├── student/
│   ├── teacher/
│   └── admin/
│       ├── screens/
│       └── bloc/
├── main.dart
📦 BLoC Structure for Each Feature

plaintext
Copy
Edit
feature/
├── bloc/
│   ├── feature_event.dart
│   ├── feature_state.dart
│   └── feature_bloc.dart
📲 Essential Screens

Splash screen

Login / Signup

Role-selection

🔹 Admin

Course list, Add/Edit Course

Assign instructor

🔹 Teacher

Dashboard

Create assignments/quizzes

Attendance

Schedule sessions

🔹 Student

Browse/enroll courses

Assignment submission

Quizzes

Join/replay sessions

View materials, feedback, attendance

📡 API Integration (REST - JSON via Dio)

Base config

Auth token with interceptors

Centralized error handling

API service wrapper

🔔 Push Notifications (Mobile)

Firebase Messaging

Foreground/background handling

Navigate to relevant screen on tap

💳 Stripe Payment Integration (Mobile)

Mobile payment UI (card details)

Trigger payment and confirm via API

Waitlist logic on full enrollment

🎥 Live Video Sessions (Mobile)

Schedule session (teacher)

Join via embedded player (student)

Optional live chat

Playback support (replay from link/recording)

✅ Bonus Requirements

Use AppRouter (named routing)

Use GetIt (via injectable) for DI

Modularize features

Use equatable for all models/states

