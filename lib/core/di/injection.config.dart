// This file will be generated by build_runner, this is a placeholder
// that will allow the project to compile until the real file is generated.

import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';

import '../routing/app_router.dart';
import '../services/api_service.dart';
import '../services/storage_service.dart';
import '../services/notification_service.dart';
import '../../data/datasources/auth_datasource.dart';
import '../../data/datasources/course_datasource.dart';
import '../../data/repositories/auth_repository_impl.dart';
import '../../data/repositories/course_repository_impl.dart';
import '../../domain/repositories/auth_repository.dart';
import '../../domain/repositories/course_repository.dart';
import '../../domain/usecases/auth/login_usecase.dart';
import '../../domain/usecases/course/get_courses_usecase.dart';
import '../../presentation/auth/bloc/auth_bloc.dart';
import '../../presentation/student/bloc/student_dashboard_bloc.dart';
import '../../presentation/teacher/bloc/teacher_dashboard_bloc.dart';
// TODO: Uncomment once admin dashboard bloc is implemented
// import '../../presentation/admin/bloc/admin_dashboard_bloc.dart';

// This function will be replaced by the generated one
@InjectableInit(
  initializerName: r'$initGetIt',
  preferRelativeImports: true,
  asExtension: false,
)
GetIt $initGetIt(
  GetIt getIt, {
  String? environment,
  EnvironmentFilter? environmentFilter,
}) {
  // Services
  getIt.registerSingleton<ApiService>(ApiService());
  getIt.registerSingleton<StorageService>(StorageService());
  getIt.registerSingleton<NotificationService>(NotificationService());
  getIt.registerSingleton<AppRouter>(AppRouter());

  // Data sources
  getIt.registerFactory<AuthDataSource>(
    () => AuthDataSource(getIt<ApiService>()),
  );
  getIt.registerFactory<CourseDataSource>(
    () => CourseDataSource(getIt<ApiService>()),
  );

  // Repositories
  getIt.registerFactory<AuthRepository>(
    () => AuthRepositoryImpl(getIt<AuthDataSource>(), getIt<StorageService>()),
  );
  getIt.registerFactory<CourseRepository>(
    () => CourseRepositoryImpl(getIt<CourseDataSource>()),
  );

  // Use cases
  getIt.registerFactory<LoginUseCase>(
    () => LoginUseCase(getIt<AuthRepository>()),
  );
  getIt.registerFactory<GetCoursesUseCase>(
    () => GetCoursesUseCase(getIt<CourseRepository>()),
  );

  // BLoCs
  getIt.registerFactory<AuthBloc>(
    () => AuthBloc(
      loginUseCase: getIt<LoginUseCase>(),
      storageService: getIt<StorageService>(),
    ),
  );
  getIt.registerFactory<StudentDashboardBloc>(
    () => StudentDashboardBloc(getCoursesUseCase: getIt<GetCoursesUseCase>()),
  );
  getIt.registerFactory<TeacherDashboardBloc>(() => TeacherDashboardBloc());
  getIt.registerFactory<AdminDashboardBloc>(() => AdminDashboardBloc());

  return getIt;
}
